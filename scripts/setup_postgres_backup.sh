#!/bin/bash
# Setup PostgreSQL Automatic Backup via Cron
# Creates daily backups at 02:00 AM, keeps last 30 days

set -e  # Exit on error

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}🗄️  Setting up PostgreSQL automatic backup...${NC}"

# Configuration
BACKUP_DIR="/home/$(whoami)/backups/postgres"
DB_NAME="bist_data"
DB_USER="ademcelik"
RETENTION_DAYS=30

# Create backup directory
echo -e "${YELLOW}📁 Creating backup directory: $BACKUP_DIR${NC}"
mkdir -p "$BACKUP_DIR"
echo -e "${GREEN}✅ Backup directory created${NC}"

# Create backup script
BACKUP_SCRIPT="$BACKUP_DIR/backup.sh"
echo -e "${YELLOW}📝 Creating backup script: $BACKUP_SCRIPT${NC}"

cat > "$BACKUP_SCRIPT" << 'EOF'
#!/bin/bash
# PostgreSQL Backup Script
# Auto-generated by setup_postgres_backup.sh

BACKUP_DIR="/home/$(whoami)/backups/postgres"
DB_NAME="bist_data"
DB_USER="ademcelik"
RETENTION_DAYS=30
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/${DB_NAME}_${DATE}.sql.gz"

# Create backup
pg_dump -U "$DB_USER" "$DB_NAME" | gzip > "$BACKUP_FILE"

if [ $? -eq 0 ]; then
    echo "✅ Backup successful: $BACKUP_FILE"
    
    # Get file size
    SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
    echo "📊 Backup size: $SIZE"
    
    # Delete old backups (keep last N days)
    find "$BACKUP_DIR" -name "${DB_NAME}_*.sql.gz" -mtime +$RETENTION_DAYS -delete
    echo "🗑️  Old backups cleaned (keeping last $RETENTION_DAYS days)"
else
    echo "❌ Backup failed!"
    exit 1
fi
EOF

chmod +x "$BACKUP_SCRIPT"
echo -e "${GREEN}✅ Backup script created${NC}"

# Test backup
echo -e "${YELLOW}🧪 Testing backup...${NC}"
bash "$BACKUP_SCRIPT"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Test backup successful!${NC}"
    
    # List backup files
    echo -e "${YELLOW}📋 Current backups:${NC}"
    ls -lh "$BACKUP_DIR"/*.sql.gz 2>/dev/null || echo "No backups yet"
else
    echo -e "${RED}❌ Test backup failed!${NC}"
    exit 1
fi

# Add to crontab
echo -e "${YELLOW}⏰ Adding to crontab (daily at 02:00 AM)...${NC}"

# Check if crontab entry already exists
if crontab -l 2>/dev/null | grep -q "$BACKUP_SCRIPT"; then
    echo -e "${YELLOW}⚠️  Crontab entry already exists, skipping...${NC}"
else
    # Add new crontab entry
    (crontab -l 2>/dev/null; echo "0 2 * * * $BACKUP_SCRIPT >> $BACKUP_DIR/backup.log 2>&1") | crontab -
    echo -e "${GREEN}✅ Crontab entry added${NC}"
fi

# Show crontab
echo -e "${YELLOW}📋 Current crontab entries:${NC}"
crontab -l | grep -v "^#" | grep -v "^$"

echo -e "${GREEN}✨ PostgreSQL automatic backup setup complete!${NC}"
echo -e "${YELLOW}📊 Summary:${NC}"
echo -e "  • Backup directory: $BACKUP_DIR"
echo -e "  • Database: $DB_NAME"
echo -e "  • Schedule: Daily at 02:00 AM"
echo -e "  • Retention: $RETENTION_DAYS days"
echo -e "  • Backup script: $BACKUP_SCRIPT"
echo -e "  • Log file: $BACKUP_DIR/backup.log"
